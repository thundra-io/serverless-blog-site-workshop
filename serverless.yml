service: blog-site

plugins:
  - serverless-deployment-bucket
  - serverless-localstack # only activated when stage is "local"

custom:
  stage: ${opt:stage, "local"}
  region: ${opt:region, "us-east-1"}
  deploymentBucketName: ${self:service}-deployment-bucket-${self:custom.stage}
  blogPostProcessQueueName: BlogPostProcessQueue
  blogPostTableName: BlogPostTable
  blogPostNotificationTopicName: BlogPostNotificationTopic
  blogPostElasticsearchHostName: search-serverless-blog-site-es-333yxh7v35aqkpe3uw7ztttfga.eu-west-2.es.amazonaws.com
  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - local
    debug: true
    autostart: true

resources:
  Resources:
    BlogPostProcessQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.blogPostProcessQueueName}
    BlogPostTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.blogPostTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    BlogPostNotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.blogPostNotificationTopicName}

package:
  excludeDevDependencies: true
  exclude:
    - .vscode/**
    - frontend/**
    - doc/**

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  memorySize: ${opt:memory, 512}
  timeout: ${opt:timeout, 30}
  # layers:
  #   - arn:aws:lambda:${self:custom.region}:269863060030:layer:thundra-lambda-node-layer-minified:94
  deploymentBucket:
    name: ${self:custom.deploymentBucketName}
  environment:
    THUNDRA_APIKEY: ${env:THUNDRA_APIKEY}
    THUNDRA_AGENT_REPORT_REST_BASEURL: ${env:THUNDRA_AGENT_REPORT_REST_BASEURL}
    THUNDRA_AGENT_TRACE_INSTRUMENT_TRACEABLECONFIG: src.service.blogPostService.*[traceArgs=true,traceReturnValue=true,traceLineByLine=true]
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource: arn:aws:sqs:${self:provider.region}:*:${self:custom.blogPostProcessQueueName}
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.blogPostTableName}
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: "*" #arn:aws:sns:${self:provider.region}:*:${self:custom.blogPostNotificationTopicName}

functions:
  searchBlogPosts:
    handler: src/blogApi.searchBlogPosts
    environment:
      BLOG_POST_ES_HOST_NAME: ${self:custom.blogPostElasticsearchHostName}
      BLOG_POST_ES_INDEX_IDENTIFIER:
        Ref: AWS::AccountId
    events:
      - http:
          method: GET
          path: blog/search
          cors: true
  postBlogPost:
    handler: src/blogApi.postBlogPost
    environment:
      BLOG_POST_PROCESS_QUEUE_URL:
        Ref: BlogPostProcessQueue
    events:
      - http:
          method: POST
          path: blog/post
          cors: true
  reviewBlogPost:
    handler: src/blogApi.reviewBlogPost
    environment:
      BLOG_POST_TABLE_NAME: ${self:custom.blogPostTableName}
      BLOG_POST_NOTIFICATION_TOPIC_ARN:
        Ref: BlogPostNotificationTopic
    events:
      - http:
          method: POST
          path: blog/review/{blogPostId}
          cors: true
  publishBlogPost:
    handler: src/blogApi.publishBlogPost
    environment:
      BLOG_POST_TABLE_NAME: ${self:custom.blogPostTableName}
      BLOG_POST_NOTIFICATION_TOPIC_ARN:
        Ref: BlogPostNotificationTopic
    events:
      - http:
          method: POST
          path: blog/publish/{blogPostId}
          cors: true
  deleteBlogPost:
    handler: src/blogApi.deleteBlogPost
    environment:
      BLOG_POST_TABLE_NAME: ${self:custom.blogPostTableName}
    events:
      - http:
          method: DELETE
          path: blog/{blogPostId}
          cors: true
  getBlogPost:
    handler: src/blogApi.getBlogPost
    environment:
      BLOG_POST_TABLE_NAME: ${self:custom.blogPostTableName}
    events:
      - http:
          method: GET
          path: blog/{blogPostId}
          cors: true
  blogPostProcessor:
    handler: src/blogPostProcessor.handler
    environment:
      BLOG_POST_TABLE_NAME: ${self:custom.blogPostTableName}
      BLOG_POST_NOTIFICATION_TOPIC_ARN:
        Ref: BlogPostNotificationTopic
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - BlogPostProcessQueue
              - Arn
          batchSize: 1
  blogPostReplicator:
    handler: src/blogPostReplicator.handler
    environment:
      BLOG_POST_ES_HOST_NAME: ${self:custom.blogPostElasticsearchHostName}
      BLOG_POST_ES_INDEX_IDENTIFIER:
        Ref: AWS::AccountId
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [BlogPostTable, StreamArn]
